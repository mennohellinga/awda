#!/usr/bin/python3

###############################################################################
# GE3V17043 --- Soldiers, Guerrillas, Terrorists
# Data analysis for the Atomwaffen posts in the leaked Iron March database
# M. Hellinga, 12 Nov. 2019 - ENDDATE
#
# This program will:
#   --- describe the tables relevant to researching the AWD organisational
#       structure
#   --- create a list of users who post on the AWD
#   --- export its results in LaTeX
#
# INPUT:
#   The directory from which the program is called, must contain a subdirectory
#   called data, which must contain the following files, all of which are
#   output by the scripts, contained in the torrent, which convert the original
#   database to sqlite3.
#       --- core_members.db
#       --- core_message_posts.db
#       --- core_message_topics.db
#       --- core_search_index.db
#
# OUTPUT:
#   The program will make a directory called LaTeX in its working directory.
#   If it already exists, all data will be cleared from it. The following
#   files will be created:
#       --- master.tex: the coordinating, master document. This file brings all
#               the others together.
#       --- core_members_description.tex: describes the table containing all
#               known Iron March members at the time of the snapshot.
#       --- core_message_posts.tex: describes the table containing all known
#               private messages on Iron March
#       --- core_message_topics.tex: describes the table containing all known
#               thread topics on Iron March
#       --- core_search_index.tex: describes the table containing all known
#               forum posts on Iron March.
#       --- awd_posters.tex: a table of all users who posted about the AWD
#
# OPERATING SYSTEM:
#   This program has only been tested on a Linux system.
#
# CAVEATS:
#   This program will not work if it does not have rwx access to its working
#   directory and all its subdirectories.
#
#   This program will not work if the specified input files are absent.
#
#   This program might not fail gracefully.
###############################################################################

import re
import sqlite3

import LT_strings

LaTeX_path_ns = './LaTeX'
LaTeX_path = LaTeX_path_ns+'/'

def sanitise_LaTeX(string):
    '''
        Escape all LaTeX control characters in the argument string with
        backslashes, so as to form plain LaTeX text.
    '''

    p = re.compile(r'([\\_$^{}])')
    return p.sub(r'\\\1', string)

def has_cyr(text):
    '''returns true if text contains cyrillic characters'''
    
    return bool(re.search('[\u0400-\u04FF]', text))

def maybe_cyr(text):
    '''
        maybe_cyr(text)

        Sanitise text for LaTeX output. If it contains cyrillic characters,
        apply LT_strings.make_cyr to it.
    '''

    text = sanitise_LaTeX(text)

    if has_cyr(text):
        text = LT_strings.make_cyr(text)

    return text

def describetable_LaTeX(connection, name):
    '''
        describetable_LaTeX(connection, name)

        Retrieves a list of columns from table <name>, in the database connected
        to <connection>. Prints a table containing each column's ID, name and
        type in a LaTeX tabular environment at LaTeX_path+<name>+'.tex'
    '''

    f = open(LaTeX_path+name+'_description.tex', 'w+')
    f.write(r'''
            \section{'''+sanitise_LaTeX(name)+r''' --- Table Description}
            Column list generated by describetable\_LaTeX(\emph{connection\_name}, "'''+sanitise_LaTeX(name)+r'''").

            \centering
            \begin{longtable}{cll}
                \toprule
                \textbf{ID} &   \textbf{name}   &   \textbf{type}   \\
                \midrule
            ''')

    # this looks hideously insecure. Which it would be, if this function were
    # not guaranteed to receive safe and sane arguments

    c = connection.cursor()
    for t in c.execute('''pragma table_info(%s)''' % name):
        f.write(repr(t[0])+'&'+sanitise_LaTeX(t[1])+'&'+sanitise_LaTeX(t[2])+'\\\\\n')

    f.write(r'''\bottomrule
                \end{longtable}
    ''')
    f.close ()

    f = open(LaTeX_path+'master.tex', 'a')
    f.write('\\include{'+name+'_description}\n')
    f.close()

import datetime

def list_of_users():
    '''
        list_of_users()

        Retrieves a list of users who have posted or messaged about the AWD on
        Iron march. Prints a table containing each user's ID, username, number
        of AWD posts, total number of posts, percentage of posts on the AWD,
        and the user's join date.
    '''
    f = open(LaTeX_path+'awd_posters.tex', 'w+')
    f.write(r'''
            \section{Users who posted about the Atomwaffen Division}
            Table generated by list\_of\_users().

            \centering
            \begin{longtable}{clccl}
                \toprule
                \textbf{user ID} &   \textbf{user name}   &   \textbf{\awd\ posts}  &   \textbf{total posts}  &   \textbf{date joined}   \\
                \midrule
            ''')
    searchindex = sqlite3.connect('data/core_search_index.db')
    coremembers = sqlite3.connect('data/core_members.db')

    c = searchindex.cursor()
    d = coremembers.cursor()
    e = searchindex.cursor()

    for ID in c.execute(''' SELECT DISTINCT index_author
                            FROM core_search_index
                            WHERE index_content LIKE '%atomwaffen%'
                            COLLATE NOCASE
                            ORDER BY index_author
                            '''):
        id = repr(ID[0])
        for member in d.execute(''' SELECT name, member_posts, joined
                                    FROM core_members
                                    WHERE member_id = '''+id+'''
                                    '''):
            name = maybe_cyr(member[0])
            
            awd_posts = e.execute('''
                SELECT COUNT(*)
                FROM core_search_index
                WHERE index_author = '''+id+'''
                AND index_content LIKE '%atomwaffen%'
                COLLATE NOCASE
            ''').fetchall()
            awd_posts = repr(awd_posts[0][0])

            total_posts = repr(member[1])
            date = datetime.datetime.utcfromtimestamp(member[2]).strftime('%Y/%m/%d')
            
            f.write(id+'&'+name+'&'+awd_posts+'&'+total_posts+'&'+date+"\\\\\n")

    f.write(r'''\bottomrule
                \end{longtable}
    ''')
    f.close ()

    f = open(LaTeX_path+'master.tex', 'a')
    f.write('\\include{awd_posters}\n')
    f.close()

def LaTeX_master_open():
    '''
        writes the header of the LaTeX master document
    '''

    f = open(LaTeX_path+'master.tex', 'w+')
    f.write(LT_strings.master_open)

def LaTeX_master_close():
    '''
        Writes the footer of the LaTeX master document
    '''

    f = open(LaTeX_path+'master.tex', 'a')
    f.write(LT_strings.master_close)
    f.close()

LaTeX_master_open()

# create the table descriptions

conn = sqlite3.connect('data/core_members.db')
describetable_LaTeX(conn, 'core_members')

conn = sqlite3.connect('data/core_message_posts.db')
describetable_LaTeX(conn, 'core_message_posts')

conn = sqlite3.connect('data/core_message_topics.db')
describetable_LaTeX(conn, 'core_message_topics')

conn = sqlite3.connect('data/core_search_index.db')
describetable_LaTeX(conn, 'core_search_index')

list_of_users()

LaTeX_master_close()
